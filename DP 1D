1137. N-th Tribonacci Number

func tribonacci(n int) int {
    t0 :=0
    t1 :=1
    t2 :=1
    if n ==0 {
        return 0        
    }
    if n == 1 || n == 2 {
        return 1
    }
    tnext := 0
    for i := 3 ; i <= n ; i++ {
        tnext = t0 + t1 + t2
        t0, t1, t2 = t1, t2, tnext
    }
    return tnext
}

746. Min Cost Climbing Stairs

func minCostClimbingStairs(cost []int) int {
   
    len := len(cost)
    minCost := make([]int, len) 
    minCost[len-1] = cost[len-1]
    minCost[len-2] = cost[len-2]

    for i := len -3; i >= 0; i-- {
        minCost[i] = min(cost[i]+ minCost[i+1], cost[i] + minCost[i+2])
    }
    return min(minCost[0], minCost[1])
}

func min(a, b int) int {
    if a < b {
        return a
    }
    return b
}

198. House Robber

func rob(nums []int) int {
    count := len(nums)
    robMax := make([]int, count)


    if count < 2 {
        return nums[0]
    }

    if count < 3 {
        return max(nums[0], nums[1])
    }

    if count < 4 {
        return max(nums[0]+ nums[2], nums[1])
    }

    robMax[count -1] = nums[count-1]
    robMax[count -2] = nums[count-2]
    robMax[count -3] = nums[count-3] + nums[count-1]

    for i := count-4; i >=0 ;i-- {
        nextMax := max(robMax[i+2], robMax[i+3])
        fmt.Println(i, nextMax)
        robMax[i] = nums[i] + nextMax
    }
    fmt.Println(robMax)
    return max(robMax[0], robMax[1])
}

func max(a,b int) int {
    if a > b {
        return a
    }
    return b
}
