 215 Kth Largest Element in an Array 

import "container/heap"

func findKthLargest(nums []int, k int) int {
    
    minHeap := newMinHeap()
    for i:=0; i < len(nums); i++ {
        heap.Push(minHeap, nums[i])
        if minHeap.Len() > k {
            _ = heap.Pop(minHeap)
        }        
    }
   
    return minHeap.Top()
}

// MinHeap structure initialization
type MinHeap []int

// newMinHeap function initializes an instance of MinHeap
func newMinHeap() *MinHeap {
	min := &MinHeap{}
	heap.Init(min)
	return min
}

// Len function returns the length of MinHeap
func (h MinHeap) Len() int {
    return len(h)
}

// Empty function returns true if empty, false otherwise
func (h MinHeap) Empty() bool {
    return len(h) == 0
}

// Less function compares two elements of the MinHeap given their indexes
func (h MinHeap) Less(i, j int) bool {
    return h[i] < h[j]
}

// Swap function swaps the values of the elements whose indices are given
func (h MinHeap) Swap(i, j int) {
    h[i], h[j] = h[j], h[i]
}

// Top function returns the element at the top of the MinHeap
func (h MinHeap) Top() int {
    return h[0]
}

func (h MinHeap) Dump() {
    fmt.Println(h)
}

// Push function pushes an element into the MinHeap
func (h *MinHeap) Push(x interface{}) {
	*h = append(*h, x.(int))
}

// Pop function pops the element at the top of the MinHeap
func (h *MinHeap) Pop() interface{} {
	old := *h
	n := len(old)
	x := old[n-1]
	*h = old[0 : n-1]
	return x
}

2336. Smallest Number in Infinite Set

import "container/heap"

type SmallestInfiniteSet struct {
    minHeap *MinHeap
}


func Constructor() SmallestInfiniteSet {
    minh := newMinHeap()

    for i:=1; i < 1000; i++ {
        heap.Push(minh, i)
    }
    return SmallestInfiniteSet{minHeap : minh}
}


func (this *SmallestInfiniteSet) PopSmallest() int {
    return heap.Pop(this.minHeap).(int)
}


func (this *SmallestInfiniteSet) AddBack(num int)  {
    heap.Push(this.minHeap, num)
}
