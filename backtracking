
17. Letter Combinations of a Phone Number

func letterCombinations(digits string) []string {
    letterMap := map[byte][]string{
       // '0':[]{' '},
       // '1':[]{' '},
        '2':[]string{"a","b","c"},
        '3':[]string{"d","e","f"},
        '4':[]string{"g","h","i"},
        '5':[]string{"j","k","l"},
        '6':[]string{"m","n","o"},
        '7':[]string{"p","q","r","s"},
        '8':[]string{"t","u","v"},
        '9':[]string{"w","x","y","z"},
    }
    ret := []string{}
    for i  := range digits {
        ret1 :=  []string{}
        chArr :=  letterMap[digits[i]]
        for i:=0; i <len(chArr);i++ {
            if len(ret) !=0 {            
              for j := 0 ; j < len(ret); j++ {
                 ret1  =append( ret1, ret[j] + chArr[i])
              }
            } else {
                 ret1  =chArr
            }
        }
        ret = ret1
    }
    return ret
}

216. Combination Sum III

func combinationSum3(k int, n int) [][]int {
	t := []int{}
    ans := [][]int{}
	var dfs func(i, s int)

	dfs = func(i, s int) {
		if s == 0 {
			if len(t) == k {
				ans = append(ans, slices.Clone(t))
			}
			return
		}
		if i > 9 || i > s || len(t) >= k {
			return
		}
		for j := i; j <= 9; j++ {
			t = append(t, j)
			dfs(j+1, s-j)
			t = t[:len(t)-1]
		}
	}

    
	dfs(1, n)
	return ans
}



